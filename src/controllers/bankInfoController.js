const bankInfoModel = require("../models/bankInfoModel");
const { success, error } = require("../utils/response");

// ‚ûï T·∫°o BankInfo m·ªõi
exports.createBankInfo = async (req, res) => {
  try {
    const { bankName, accountNumber, accountId, barPageId } = req.body;

    // Validation
    if (!bankName || !accountNumber) {
      return res.status(400).json(error("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: BankName v√† AccountNumber"));
    }

    if (!accountId && !barPageId) {
      return res.status(400).json(error("Ph·∫£i c√≥ accountId ho·∫∑c barPageId"));
    }

    if (accountId && barPageId) {
      return res.status(400).json(error("Ch·ªâ ƒë∆∞·ª£c c√≥ accountId ho·∫∑c barPageId, kh√¥ng ƒë∆∞·ª£c c√≥ c·∫£ hai"));
    }

    // Validate accountNumber: ch·ªâ ch·ª©a s·ªë
    if (!/^\d+$/.test(accountNumber)) {
      return res.status(400).json(error("S·ªë t√†i kho·∫£n ch·ªâ ƒë∆∞·ª£c ch·ª©a s·ªë"));
    }

    // Ki·ªÉm tra xem ƒë√£ c√≥ BankInfo cho accountId ho·∫∑c barPageId ch∆∞a
    if (accountId) {
      const existing = await bankInfoModel.getBankInfoByAccountId(accountId);
      if (existing) {
        return res.status(400).json(error("T√†i kho·∫£n n√†y ƒë√£ c√≥ th√¥ng tin ng√¢n h√†ng"));
      }
    }

    if (barPageId) {
      const existing = await bankInfoModel.getBankInfoByBarPageId(barPageId);
      if (existing) {
        return res.status(400).json(error("Bar page n√†y ƒë√£ c√≥ th√¥ng tin ng√¢n h√†ng"));
      }
    }

    const bankInfo = await bankInfoModel.createBankInfo({
      bankName,
      accountNumber,
      accountId: accountId || null,
      barPageId: barPageId || null,
    });

    return res.status(201).json(success("T·∫°o th√¥ng tin ng√¢n h√†ng th√†nh c√¥ng", bankInfo));
  } catch (err) {
    console.error("createBankInfo error:", err);
    
    // Handle unique constraint violation
    if (err.number === 2627 || err.message.includes("UNIQUE")) {
      return res.status(400).json(error("T√†i kho·∫£n n√†y ƒë√£ c√≥ th√¥ng tin ng√¢n h√†ng"));
    }
    
    return res.status(500).json(error(err.message || "L·ªói m√°y ch·ªß"));
  }
};

// üìñ L·∫•y BankInfo theo ID
exports.getBankInfoById = async (req, res) => {
  try {
    const { bankInfoId } = req.params;
    const bankInfo = await bankInfoModel.getBankInfoById(bankInfoId);
    
    if (!bankInfo) {
      return res.status(404).json(error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng√¢n h√†ng"));
    }

    return res.json(success("L·∫•y th√¥ng tin ng√¢n h√†ng th√†nh c√¥ng", bankInfo));
  } catch (err) {
    console.error("getBankInfoById error:", err);
    return res.status(500).json(error(err.message || "L·ªói m√°y ch·ªß"));
  }
};

// üìñ L·∫•y BankInfo theo AccountId
exports.getBankInfoByAccountId = async (req, res) => {
  try {
    console.log("üîç getBankInfoByAccountId controller - START");
    const { accountId } = req.params;
    console.log("üîç accountId:", accountId);
    const bankInfo = await bankInfoModel.getBankInfoByAccountId(accountId);
    console.log("üîç bankInfo result:", bankInfo);
    
    if (!bankInfo) {
      console.log("üîç No bankInfo found, returning 404");
      return res.status(404).json(error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng√¢n h√†ng"));
    }

    console.log("üîç Returning success");
    return res.json(success("L·∫•y th√¥ng tin ng√¢n h√†ng th√†nh c√¥ng", bankInfo));
  } catch (err) {
    console.error("getBankInfoByAccountId error:", err);
    return res.status(500).json(error(err.message || "L·ªói m√°y ch·ªß"));
  }
};

// üìñ L·∫•y BankInfo theo BarPageId
exports.getBankInfoByBarPageId = async (req, res) => {
  try {
    const { barPageId } = req.params;
    const bankInfo = await bankInfoModel.getBankInfoByBarPageId(barPageId);
    
    if (!bankInfo) {
      return res.status(404).json(error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng√¢n h√†ng"));
    }

    return res.json(success("L·∫•y th√¥ng tin ng√¢n h√†ng th√†nh c√¥ng", bankInfo));
  } catch (err) {
    console.error("getBankInfoByBarPageId error:", err);
    return res.status(500).json(error(err.message || "L·ªói m√°y ch·ªß"));
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t BankInfo
exports.updateBankInfo = async (req, res) => {
  try {
    const { bankInfoId } = req.params;
    const { bankName, accountNumber } = req.body;

    if (!bankName && !accountNumber) {
      return res.status(400).json(error("Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt tr∆∞·ªùng ƒë·ªÉ c·∫≠p nh·∫≠t"));
    }

    // Validate accountNumber n·∫øu c√≥
    if (accountNumber && !/^\d+$/.test(accountNumber)) {
      return res.status(400).json(error("S·ªë t√†i kho·∫£n ch·ªâ ƒë∆∞·ª£c ch·ª©a s·ªë"));
    }

    const updated = await bankInfoModel.updateBankInfo(bankInfoId, { bankName, accountNumber });

    if (!updated) {
      return res.status(404).json(error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng√¢n h√†ng"));
    }

    return res.json(success("C·∫≠p nh·∫≠t th√¥ng tin ng√¢n h√†ng th√†nh c√¥ng", updated));
  } catch (err) {
    console.error("updateBankInfo error:", err);
    return res.status(500).json(error(err.message || "L·ªói m√°y ch·ªß"));
  }
};

// üóëÔ∏è X√≥a BankInfo
exports.deleteBankInfo = async (req, res) => {
  try {
    const { bankInfoId } = req.params;
    const deleted = await bankInfoModel.deleteBankInfo(bankInfoId);

    if (!deleted) {
      return res.status(404).json(error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng√¢n h√†ng"));
    }

    return res.json(success("X√≥a th√¥ng tin ng√¢n h√†ng th√†nh c√¥ng"));
  } catch (err) {
    console.error("deleteBankInfo error:", err);
    
    // Handle foreign key constraint violation
    if (err.number === 547 || err.message.includes("FOREIGN KEY")) {
      return res.status(400).json(error("Kh√¥ng th·ªÉ x√≥a v√¨ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi t√†i kho·∫£n kh√°c"));
    }
    
    return res.status(500).json(error(err.message || "L·ªói m√°y ch·ªß"));
  }
};

