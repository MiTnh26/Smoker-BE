const Notification = require("../models/notificationModel");
const mongoose = require("mongoose");

class NotificationController {
  // T·∫°o th√¥ng b√°o m·ªõi
  async createNotification(req, res) {
    try {
      const {
        "Lo·∫°i Th√¥ng B√°o": loaiThongBao,
        "Ng∆∞·ªùi Nh·∫≠n Th√¥ng B√°o": nguoiNhan,
        "N·ªôi Dung": noiDung,
        "ƒê∆∞·ªùng d·∫´n": duongDan
      } = req.body;
      
      const nguoiGui = req.user?.id;

      if (!nguoiGui) {
        return res.status(401).json({
          success: false,
          message: "Unauthorized"
        });
      }

      const notificationData = {
        "G·ª≠i L√∫c": new Date(),
        "Lo·∫°i Th√¥ng B√°o": loaiThongBao,
        "Ng∆∞·ªùi G·ª≠i Th√¥ng B√°o": nguoiGui,
        "Ng∆∞·ªùi Nh·∫≠n Th√¥ng B√°o": nguoiNhan,
        "N·ªôi Dung": noiDung,
        "Tr·∫°ng Th√°i": "Ch∆∞a ƒê·ªçc",
        "ƒê∆∞·ªùng d·∫´n": duongDan
      };

      const notification = new Notification(notificationData);
      await notification.save();

      res.status(201).json({
        success: true,
        data: notification,
        message: "Notification created successfully"
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        message: "Internal server error",
        error: error.message
      });
    }
  }

  // L·∫•y th√¥ng b√°o c·ªßa user
  async getNotifications(req, res) {
    try {
      const userId = req.user?.id;
      const { page = 1, limit = 10 } = req.query;

      if (!userId) {
        return res.status(401).json({
          success: false,
          message: "Unauthorized"
        });
      }

      const skip = (page - 1) * limit;
      
      const notifications = await Notification.find({
        "Ng∆∞·ªùi Nh·∫≠n Th√¥ng B√°o": userId
      })
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(parseInt(limit));
      
      const total = await Notification.countDocuments({
        "Ng∆∞·ªùi Nh·∫≠n Th√¥ng B√°o": userId
      });

      res.status(200).json({
        success: true,
        data: notifications,
        pagination: {
          page,
          limit,
          total,
          pages: Math.ceil(total / limit)
        }
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        message: "Internal server error",
        error: error.message
      });
    }
  }

  // ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
  async markAsRead(req, res) {
    try {
      const { notificationId } = req.params;
      const userId = req.user?.id;

      if (!userId) {
        return res.status(401).json({
          success: false,
          message: "Unauthorized"
        });
      }

      const notification = await Notification.findOneAndUpdate(
        {
          _id: notificationId,
          "Ng∆∞·ªùi Nh·∫≠n Th√¥ng B√°o": userId
        },
        { "Tr·∫°ng Th√°i": "ƒê√£ ƒê·ªçc" },
        { new: true }
      );

      if (!notification) {
        return res.status(404).json({
          success: false,
          message: "Notification not found"
        });
      }

      res.status(200).json({
        success: true,
        data: notification,
        message: "Notification marked as read"
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        message: "Internal server error",
        error: error.message
      });
    }
  }

  // ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
  async markAllAsRead(req, res) {
    try {
      const userId = req.user?.id;

      if (!userId) {
        return res.status(401).json({
          success: false,
          message: "Unauthorized"
        });
      }

      await Notification.updateMany(
        {
          "Ng∆∞·ªùi Nh·∫≠n Th√¥ng B√°o": userId,
          "Tr·∫°ng Th√°i": "Ch∆∞a ƒê·ªçc"
        },
        { "Tr·∫°ng Th√°i": "ƒê√£ ƒê·ªçc" }
      );

      res.status(200).json({
        success: true,
        message: "All notifications marked as read"
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        message: "Internal server error",
        error: error.message
      });
    }
  }

  // L·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
  async getUnreadCount(req, res) {
    try {
      console.log("üìä getUnreadCount - Request user:", req.user);
      const userId = req.user?.id;

      if (!userId) {
        console.log("‚ùå No userId found in request");
        return res.status(401).json({
          success: false,
          message: "Unauthorized - No user ID"
        });
      }

      console.log("üìä Querying unread count for userId:", userId, "Type:", typeof userId);
      
      // Try both string and ObjectId formats
      let queryUserId = userId;
      if (typeof userId === 'string' && userId.length === 36) {
        // It's a UUID string, keep it as string
        queryUserId = userId;
      }
      
      const count = await Notification.countDocuments({
        "Ng∆∞·ªùi Nh·∫≠n Th√¥ng B√°o": queryUserId,
        "Tr·∫°ng Th√°i": "Ch∆∞a ƒê·ªçc"
      });

      console.log("‚úÖ Unread count:", count);
      res.status(200).json({
        success: true,
        data: { count }
      });
    } catch (error) {
      console.error("‚ùå Error in getUnreadCount:", error);
      console.error("‚ùå Error stack:", error.stack);
      res.status(500).json({
        success: false,
        message: "Internal server error",
        error: error.message
      });
    }
  }
}

module.exports = new NotificationController();
